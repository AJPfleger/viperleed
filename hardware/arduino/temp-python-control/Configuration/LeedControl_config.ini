# Configuration File for ReadArdo.py
#####################

[communication_bytes]
#communication byte to communicate with the Arduino. If changes are done here
#   changes have also to be done on Arduino side
# -----------------------------------------
#STARTMARKER: marks the start of a message (int, 0-255)
#ENDMARKER:  marks the end of a message (int, 0-255)
#SPECIAL_BYTE: encodes/decodes if one byte in message is a STARTMARKER, 
#   ENDMARKER or a SPECIAL_BYTE. It encodes this msg_byte with 2 bytes, 
#   first is the SPECIAL_BYTE, second is SPECIAL_BYTE - msg_byte (int, 0-255)
#PC_HARDWARE: byte to test connection and get hardware (int, 0-255)             # TODO: rename PC_CONFIGURATION
#PC_INIT_ADC: byte to initialise the adc (int, 0-255)                           # TODO: rename PC_SET_UP_ADCS
#PC_OK: byte to send a okay, that a procedure has finished on the arduino
#   (int, 0-255)
#PC_MEASURE: byte to initialise adc measurements (int, 0-255)                   # TODO: rename PC_TRIGGER_ADCS
#PC_RESET: byte to reset the arduino (int, 0-255)
#PC_SET_VOLTAGE: byte to initialise the dac (int, 0-255)
#PC_AUTOGAIN: byte to initialise the autogain (int, 0-255)
#PC_CALIBRATION:                                                                # TODO: new, needs implementation and doc
STARTMARKER = 254
ENDMARKER = 255
SPECIAL_BYTE = 252
PC_HARDWARE = 63
PC_INIT_ADC = 83
PC_OK = 75
PC_MEASURE = 84
PC_RESET = 82
PC_SET_VOLTAGE = 86 
PC_AUTOGAIN = 65
PC_ERROR = 253
PC_CALIBRATION = 67


[adc_start_configuration]
#The configuration of the ADC at the start of the measurements
# -----------------------------------------
#channel: Channel selection for the adc, possible values are 0 and 1
#polar_mode: Polarity of the measurement. 0 is bipolar and 1 is unipolar. Code
#   is written for bipolar. 
#update_rate: when suppling the adc with a master clock of 4,9MHz, allowed 
#   update rates are: 4 (50Hz), 5 (60Hz), 6 (250Hz), 7 (500Hz).
#measurement_counter: Number of measurments done before sending the value 
#   to the computer. The adc values are sumed up and divided with 
#   the measurement_counter to get the mean value. Value which can be cast to
#   int. Allowed values are from 0 - (2**16 - 1)
#maximum_gain: highest gain allowed, allowed values from 0 - 7,
#   value which can be cast to int
# -----------------------------------------
channel = 0
polar_mode = 0
update_rate = 4
measurement_counter = 10
maximum_gain = 7

[adc_autogain_configuration]
#The configuration of the adc before the autogain is done
# -----------------------------------------
#channel: Channel selection for the adc, possible values are 0 and 1
#polar_mode: Polarity of the measurement. 0 is bipolar and 1 is unipolar. Code
#   is written for bipolar. 
#update_rate: when suppling the adc with a master clock of 4.9MHz, allowed 
#   update rates are: 4 (50Hz), 5 (60Hz), 6 (250Hz), 7 (500Hz).
#measurement_counter: Number of measurements done before taking the value for 
#   configuring the right gain. The adc values are summed up and divided with 
#   the measurement_counter to get the mean value. Value which can be cast to
#   int. 
#maximum_gain: highest gain allowed, allowed values from 0 - 7,
#   value which can be cast to int
# -----------------------------------------
channel = 0
polar_mode = 0
update_rate = 7
measurement_counter = 10
maximum_gain = 7


[measurement_settings]
#Settings of measurement
# -----------------------------------------
#energy_max: Maximum energy of DAC in Volt, value that can be cast to float
#dac_settle_time: settle time for the dac, before starting the measurement 
#    the adc. Value in milliseconds which can be cast to int. 
#dac_first_settle_time: settle time for the dac, when the first value is set
#   to the dac. Value in milliseconds which can be cast to int.
#v_ref_adc: Reference voltage of adc, has to be measured directly at the adc, 
#   value in volt, that can be cast to float
#v_ref_dac: Reference voltage of dac, has to be measured directly at the dac
#   value in volt, that can be cast to float
#path: Path to the directory for the csv files with the measurement datas. 
# -----------------------------------------
energy_max = 5
dac_settle_time = 200
dac_first_settle_time = 20000
dac_value_end = 0
v_ref_adc = 2.4933
v_ref_dac = 2.489
path = E:\Work\Vienna\SPECSLab\Technical\Upgrades\Python LEED-IV\00 Measure - BernhardMayr\LEED_Package_Version1.0\LeedControl_Python3.7\LEED_measurements

[camera_settings]
# -----------------------------------------
#class_name: is the class name of the camera
#device_name: is the name to look for in the device list of the connections
#camera_settle_time: defines the time between a new value at the dac and a new 
#   image shot
#video_format: defines the video format. The first string (Y16) describes the 
#   sink format (16 bit, monochrome). The second string gives horizontal x 
#   vertical. Allowed values for DMK 33GX265 are minimum 528x4 and maximum
#   2048x1536. The first number has to be a multiple of 16 and the second a 
#   multiple of 4. 
#set_roi: enables roi, moves the frame within the full resolution
#roi_x,roi_y : horizontal and vertical distance from top-left corner in pixel
#live_mode: enables live mode to see a live stream of the measurements
#exposure_time: in milliseconds, allowed values from 0.02 - 30000, value that 
#   can be cast to float
#gain: in dB, allowed values from 0 - 48 value that can be cast to int
#n_frames: frames to stock in one trigger shot, any value that can be cast to 
#   int.
#frame_rate: frame_rate for live mode, any value that can be cast to int
#image_path: Path to the image directory
#file_name: File prefix, any value that can be cast to string  -> this will need to be adapted depending on the parameters (perhaps)

class_name = ImagingSourceDMKCamera
device_name = DMK 33GX265
camera_settle_time = 50
video_format = Y16 (1536x1536)
set_roi = False
roi_x = 0
roi_y = 0
bin_factor = 3
live_mode = False
exposure_time = 200
gain = 10
n_frames = 1
frame_rate = 10.0
image_path = E:\Work\Vienna\SPECSLab\Technical\Upgrades\Python LEED-IV\00 Measure - BernhardMayr\LEED_Package_Version1.0\LeedControl_Python3.7\LEED_images
file_name = 2020-10-23_DMX265_Exp=200-Gain=0
