#
"""
Author: Alexander M. Imre
based on tleedm_from_ase.py by Florian Kraushofer
"""


import sys
import os
import numpy as np
import lzma, base64


def refcalc_for_ase_structure(vpr_src_path,
                              exec_path,
                              ase_object = None, 
                              cut_symmetric_cell_height_fraction = 0.4, use_which_part_of_cell="keep_above", flip_cell_in_z=False,
                              switch_b_c = False,
                              uc_transformation_matrix = None, uc_isotropic_scaling = None):
    """
    ase_object
    work_path: where to perform ViPErLEED Reference calculation
    vpr_src_path: source code path (without final viperleed)
    """
    
    if os.path.abspath(vpr_src_path) not in sys.path:
        sys.path.append(os.path.abspath(vpr_src_path))

    from viperleed.tleedm import run_tleedm
    from viperleed.tleedmlib import Slab, Rparams
    from viperleed.tleedmlib.files.poscar import writePOSCAR
    
    
    # check the provided path
    
    if not os.path.isdir(exec_path):
        # Invalid path given
        raise RuntimeError("Provided path is invalid")
    
    # check for PARAMETERS file
    parameters_name = "PARAMETERS"
    if not os.path.isfile(os.path.join(exec_path, parameters_name)):
        # No PARAMETERS file – Error
        raise RuntimeError("No PARAMETERS file found – this is required")
    
    # If present, we are good to go.
    # Files IVBEAMS, PHASESHIFTS and VIBROCC are not required and can be autogenerated
    
    # Run parameters object: dummy but needed for getSurfaceAtoms
    rp = Rparams()
    
    # Transfer ASE object into slab object for ViPErLEED
    slab = Slab(ase_atoms=ase_object)
    
    # Switch b and c
    if (switch_b_c):
        slab.ucell = np.diag(np.diag(slab.ucell)[[0, 2, 1]])
        for at in slab.atlist:
            at.pos[[1, 2]] = at.pos[[2, 1]]
        slab.getCartesianCoordinates(updateOrigin=True)
    
    # Transformation of slab object: Rotation or isotropic streching/shrinking
    if (type(uc_transformation_matrix) != None):
        if (uc_isotropic_scaling != None):
            raise RuntimeError("Transofrmation matrix and isotropic scaling provided. These are mutually exclusive.")
        slab.apply_matrix_transformation(uc_transformation_matrix)
    elif (uc_isotropic_scaling != None):
        slab.apply_isotropic_scaling(uc_isotropic_scaling)
    
    
    # Cut the symmetric slab in half so we can work with just the surface
    # Remove everything below cut_fraction
    if (use_which_part_of_cell=="keep_above"):
        slab.atlist = [at for at in slab.atlist if at.pos[2] > cut_symmetric_cell_height_fraction]
    elif (use_which_part_of_cell=="keep_below"):
        slab.atlist = [at for at in slab.atlist if at.pos[2] < cut_symmetric_cell_height_fraction]
    else:
        raise RuntimeError("use_which_part_of_cell must be either 'keep_above' or 'keep_below'")
        
    slab.updateAtomNumbers()
    slab.updateElementCount()
    
    # Figure out surface sites
    site_def = {}
    surface_atoms = slab.getSurfaceAtoms(rp)
    # surface species of each element
    for el in slab.elements:
        atn = [at.oriN for at in surface_atoms if at.el == el]
        if atn:
            site_def[el] = {'surf': atn}
            

    poscar_name = "POSCAR"
    if os.path.isfile(os.path.join(exec_path, poscar_name)):
        raise RuntimeError("A 'POSCAR' file is already present in directory.")
    writePOSCAR(slab, "POSCAR")
    
    
    # Take care of input files and work directory
    work_path = os.path.abspath(os.path.join(exec_path, "work"))
    os.makedirs(work_path, exist_ok=True)
    
    # copy input files to work directory
    # NOTE: PARAMETERS should NOT contain SITE_DEF flags.
    # VIBROCC should contain *_surf sites for all elements.
    for file in ['PARAMETERS', 'VIBROCC', 'IVBEAMS', 'PHASESHIFTS', 'DISPLACEMENTS']:
        try:
            shutil.copy2(os.path.join(exec_path, file), os.path.join(work_path, file))
        except FileNotFoundError:
            pass
    
        
    home = os.path.abspath('.')
    os.chdir(work_path)
    
    
    # We are ready to run ViPErLEED! Have fun!
    run_tleedm(slab=slab, preset_params={'SITE_DEF': site_def},
               source=os.path.join(vpr_src_path, 'viperleed'))
    
    # ViPErLEED should have suceeded if you arrive here!
    
    # read out the THEOBEAMS.csv file and complex ampliudes:
    theobeams_name = 'THEOBEAMS.csv'
    amp_real_name = 'Complex_amplitudes_real.csv'
    amp_imag_name = 'Complex_amplitudes_imag.csv'
    
    with open(theobeams_name) as f:
        theobeams_file_str = f.read()
    with open(amp_real_name) as f:
        amp_real_file_str = f.read()
    with open(amp_imag_name) as f:
        amp_imag_file_str = f.read()
    
    # Move back home           
    os.chdir(home)
               

    return (theobeams_file_str, amp_real_file_str, amp_imag_file_str)

def theobeams_from_refcalc():
    with open("THEOBEAMS.csv") as file:
        theobeams_str = file.read()
    with open("THEOBEAMS.csv") as file:
        theobeams_str = file.read()
    