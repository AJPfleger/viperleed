13.06.2019

- defined Slab and Atom classes
- routines for reading/writing POSCAR/CONTCAR 
- sorting atoms by Z/Element/Original order

14.06.2019

- added logging
- added fortranformat package
- moved class and function definitions to module
- changed data type of unit cells and atom coordinates to numpy arrays instead 
    of lists
- wrote Combine-POSCAR.py: combines slab and bulk POSCAR
- fixed bug in CONTCAR writeout with floats that were longer than the padding
- added STRUCTPAR reading
- added functionality to assign atoms to layers; linked layers and atoms to 
    their slabs.

18.06.2019

- renamed STRUCTPAR to PARAMETERS
- started on reading and data structure for element splitting and site type 
    definition input

19.06.2019

- implemented updateSites routine
- improved error logging and timing
- started documentation of input files and PARAMETERS on iap intrawiki
- implemented reading of IVBEAMS
- implemented generation of XBEAMS based on comparison of IVBEAMS and BEAMLIST

21.06.2019

- moved XBEAMS generation to GenerateXBEAMS.py file
- included GenerateXBEAMS.py in refcalc
- started SVIOC file structure and read-in
- added support for element name redundancies in POSCAR names and ELSPLIT names

24.06.2019

- renamed XBEAMS -> AUXBEAMS
- renamed SVIOC -> VIBOCCIN
- finished & debugged VIBOCCIN data structure and read-in
- added support for regular expressions in VIBOCCIN
- debugged handling of element name redundancies in ELSPLIT
- wrote documentation on intrawiki for ELSPLIT and VIBOCCIN

25.06.2019

- debugged handling of regular expressions

27.07.2019

- added routines for calculating cartesian coordinates (absolute and per layer)
- started GenerateAUXGeo

28.06.2019

- tested and implemented use of fortranformat package
- finished GenerateAUXGEO
- added parameter TOUTPUT to define which layers should have tensor output
- added parameter ASAZ to manually define bulk layer spacing if needed
- added intrawiki documentation for BLAY, CTRUNC, ASAZ and TOUTPUT

29.06.2019

- started cleaning up the refcalc bash script with some in/out file structure
- in writeAUXBEAMS, added funcationality of returning list of beam numbers 
    found

02.07.2019

- wrote routine to read Wood notation for SUPERLATTICE parameter

03.07.2019

- implemented skipping of excess bulk atoms based on SUPERLATTICE in 
    GenerateAUXGEO
- added sanity check of skipped atoms ratio vs unit cell size ratio
- implemented GenerateAUXLATGEO and reading of corresponding parameters
- started the GenerateAUXNONSTRUCT script; some parameters missing

04.07.2019

- implemented reading of PHASESHIFTS file (needed for LMAX calculation)
- finished GenerateAUXNONSTRUCT script, included in runrefcalc

10.07.2019

- started implementing generation of AUXPOSCAR: modification of writeCONTCAR

11.09.2019

- started working on routines for symmetry detection: find type of unit cell, 
    reduce to simpler form if possible

12.09.2019

- fixed bugs in projectCtoZ
- split Module_TensErLEED_Interface.py into multiple smaller files in package 
    TensErLeedModules
- worked on symmetry detection routines
- wrote collapseCartesianCoordinates and getFractionalCoordinates routines

13.09.2019

- implemented detection of rotation axes in findSymmetry routine

16.09.2019

- debugged and optimized the partial findSymmetry

17.09.2019

- finished findSymmetry, tested on hematite (012) and magnetite (111) -> seems 
    to work

23.09.2019

- based on findSymmetry, started atom linking & direction lock
- split atom linking and direction lock to separate routine enforceSymmetry, 
    allowing lower-symmetry user input
- finished enforceSymmetry, started testing

24.09.-02.10.2019

- tested and optimized findSymmetry

03.10.2019

- changed unit cell modification in findSymmetry to add a to b instead of 
    inverting a (conserves chirality)
- further modding and testing findSymmetry & enforceSymmetry

04.10.2019

- further modding and testing findSymmetry & enforceSymmetry

07.10.2019

- small changes to enforceSymmetry, writing AUXPOSCAR, implemented 
    SYMMETRY_NOMOVE
- implemented _BEAMLIST generation

08.10.2019

- debugged _BEAMLIST generation
- implemented default for CTRUNC
- implemented vertical layer stacking as default in AUXGEO

09.10.2019

- started on _PHASESHIFT generation

10.10.-08.11.2019 (intermittent)

- work on _PHASESHIFT generation; some modifications to EEASiSSS fortran code

11.11.2019

- started tleedm.py master script: structure for calling different parts of the
    program (repeatedly if necessary), and to remember what data are already
    loaded
    
14.11.2019

- implemented most of the initialization to tleedm.py

15.11.2019

- finished initialization step in tleedm.py
- renamed project to TensErLEEDManager, module to tleedmlib

18.11.2019

- replaced reduceUnitCell routine with version from Michele Riva
- started writing generateMuftin routine

19.11.2019

- finished generateMuftin, but didn't test much yet
- discussed & worked on distribution architecture

20.11.2019

- tested & debugged muftin

21.11.2019

- implemented fortran compilation and FORTRAN_COMP parameter
- designed job architecture (standard and with SUPPRESS_EXE)
- finished tleedm up to refcalc execution

03.12.2019

- implemented processing of fd.out from ref-calc to THEOBEAMS

04.12.2019

- modified generatePHASESHIFTS to only use slab calculation
- wrote ModifyPhaseshifts utility

05.12.2019

- implemented manifest file for folder management
- implemented cleanup into AUX and OUT folders
- implemented packing of tensors into zip archive
- improved and tested job architecture

06.12.2019

- implemented modifyPARAMETERS routine
- implemented modification of SUPERLATTICE, BEAMINCIDENCE, and SYMMETRY_FIX
    parameters during Slab.findSymmetry and Slab.enforeSymmetry
- added default for FORTRAN_COMP

09.12.2019

- started readDISPLACEMENTS
- split findSymmetry to separate setSymmetry function
- cleaned up findSymmetry, setSymmetry and enforeSymmetry

10.12.2019

- implemented RUN parameter
- worked on readDISPLACEMENTS

11.12.2019

- finished readDISPLACEMENTS

12.12.2019

- fixed some issues with readDISPLACEMENTS
- added consistency check for displacements
- added function generateDeltaBasic
- added function generateDeltaIn

13.12.2019

- wrote the delta section in tleedm main (no testing yet)

16.12.2019

- tested and debugged delta-amplitudes
- wrote readOUTBEAMS, readAUXEXPDAT, and writeAUXEXPDAT
- wrote AUXEXPDAT_to_EXPBEAMS utility

17.12.2019

- changed parameter names to be more consistent
- renamed VIBOCCIN to VIBROCC
- implemented reading of EXPBEAMS at initialization
- added generation of bulk slabs and bulk symmetry search
- implemented writePatternInfo

18.12.2019

- started on SEARCH section in tleedm
- wrote generateSearchInput (PARAM and search.steu)

19.12.2019

- worked on search, could execute locally
- started on search result interpretation

20.12.2019

- added getEquivalentBeams from Michele Rivas GUI module (not named yet) to
   writeRfInfo function.

21.12.2019

- added writing of delta-input file (collects PARAM and DIN blocks)
- debugged search (was crashing when executed on fkpCurie server)
- added SUPPRESS_EXECUTION functionality to delta and search
- removed blocks of zeroes from PHASESHIFTS (and changed AUXGEO accordingly)
- removed production file name from first line of PHASESHIFTS

23.12.2019

- added sanity check for _PHASESHIFTS energy range
- edited SYM_DELTA behaviour in readDISPLACEMENTS to make sure unit cell is 
    conserved
- added check for freeDirection in readDISPLACEMENTS


08.01.2020 - 15.01.2020

- extensive testing
- debugging on phaseshifts, refcalc, delta, search
- implemented R-Factor calculation (automatic after refcalc)
- improved search output
- implemented R-factor result plotting

16./17.01.2020

- debugging search and search results
- implemented R_FACTOR_SMOOTH parameter
- fixed issue with search atom movement changing bulk vectors

20.01.2020

- added appending functionality to modifyPARAMETERS
- added writing of BULK_REPEAT to PARAMETERS if not present
- changed V0_IMAG to accept only one float value
- switched search from subprocess.run to subprocess.Popen
- added Search-progress.pdf plotting during search

21.01.2020

- changed V0_REAL to accept only one value
- added parameter scatter plots to Search-progress.pdf
- added Search-progress.csv output during search

22.01.2020

- debugged delta & search
- removed NperEl from POSCAR

23.01.2020

- made delta-input file more readable
- added support for convergence parameters to search
- added SEARCH_GEN_MAX_DELTA parameter for search convergence
- added reading of "search offsets" to VIBROCCIN

24.01.2020

- parallelized delta-amplitudes

27.-29.01.2020

- testing & debugging of minor issues

30.01.2020

- wrote indexer prototype

31.01.2020

- debugged createBulkSlab function

03.02.2020

- fixed bug in reading FORTRAN_COMP when value contains an '=' sign
- modified readWoodsNotation: No computation if angle=0; sanity check at the 
    end to see whether all values are roundable, if yes round, else warn
- made readIVBEAMS ignore brackets and vbars

04.-05.02.2020

- modified folder structure to include guilib

06.02.2020

- fixed bug in bulk cell generation based on SUPERLATTICE
- started writing superpos segment in main, write routines for input files

07.02.2020

- fixed index error when BULK_REPEAT was undefined and N_BULK_LAYERS == 1
- implemented more flexible input for THEO_ENERGIES
- finished superpos segment, started testing


10.02.2020

- implemented sanity checks in readIVBEAMS (data in first line)
- when reading fd.out (or spec.out), implemented comparison to ivbeams

25.02.2020

- in DISPLACEMENTS, added L(x) syntax for addressing atoms in layer x

12.03.2020

- added explicit LMAX parameter (to be used instead of PHASESHIFT_EPS)

27.03.2020

- added automatic detection of SUPERLATTICE by detecting minimum bulk unit cell
- started on detecting bulk periodicity in 3D

30.03.2020

- debugged isTranslationSymmetric function of Slab
- started POSCAR_get_bulk_repeat utility

31.03.2020

- finished POSCAR_get_bulk_repeat utility
- implemented added functionality for BULK_REPEAT: vectors, rel. coordinates

01.04.2020

- worked on bulk symmetry detection

02.04.2020

- finished first version of bulk symmetry detection

03.04.2020

- debugging: writeWEXPEL, bulk symmetry detection

06.04.2020

- fixed bulk symmetry detection when there is only one sublayer
- fixed crash during rfactor-plot if no xserver is found
- implemented automatic generation of IVBEAMS from EXPBEAMS, if file not found

07.04.2020

- implemented automatic generation of VIBROCC via temperature
- implemented SEARCH_KILL parameter

08.04.2020

- minor debugging of tleedm main
- added write-out of current & elapsed time after every section
- debugged workhistory cleanup and bookkeeper
- added support for mixed (explicit/automatic) input to LAYER_CUTS

09.04.2020

- changed rp.ivbeams type to Beams class
- modified processSearchResults so that POSCAR_OUT and VIBROCC_OUT can be
    written periodically during the search
- implemented possibility of changing GAUSSIAN_WIDTH during a search
- implemented looping in search if GUASSIAN_WIDTH changes
- modified search-progress outputs to display multiple search runs
- fixed issue that children of mpirun ran on after killing the subprocess

10.04.2020

- renamed SEARCH_GEN_MAX -> SEARCH_MAX_GEN
- renamed SEARCH_GEN_MAX_DELTA -> SEARCH_MAX_DGEN
- added SEARCH_MAX_DGEN_BEST parameter
- implemented proof-of-concept form of automatic GAUSSIAN_WIDTH refinement

14.04.2020

- started changing Delta / Tensor file handling: don't output Tensors if no
    new Tensors were calculated.
    
15.04.2020
- fully implemented automatic GAUSSIAN_WIDTH refinement
- replaced GAUSSIAN_WIDTH, SEARCH_GEN_MAX and SEARCH_GEN_MAX_DELTA parameters 
    with SEARCH_CONVERGENCE
- implemented "full convergence" based on repeated "partial convergence"
- implemented SEARCH_CULL parameter

16.04.2020
- added Tensor input files to Tensors.zip
- delta calculations now check existing deltas, only calculate new files as 
    required, and add files to zip instead of overwriting it

17.04.2020
- changed file management system: Tensors and Deltas now go to dedicated 
    Tensors and Deltas folders with numbers, instead of to OUT. Added 
    TENSOR_INDEX parameter to control which ones will be used. Major changes 
    to file handling in refcalc / delta / search / cleanup as a consequence
- big overhaul of bookkeeper: Now labels mainly based on which Tensors 
    were used, and then a job number for this specific tensor. Adapted to 
    correctly manage the new Tensors and Deltas folder system.
- re-wrote job script: Added option to copy only newest Tensors und Deltas to 
    work folder (selected by bash script). Changed script structure to have 
    user input only at the very top.

21.04.2020
- fixed issue with setting rp.halt: now sets to max(current_value, new_value)

22.04.2020
- changed azimuthal displacements: interpret values as angstrom, not degrees

23.04.2020
- displacements: added option of relative/radial displacements r(C)

24.04.2020
- cleaned up readDISPLACEMENTS function somewhat
- added disp_geo_offset to readDISPLACEMENTS and generateSearchInput

04.05.2020
- finished disp_geo_offset functionality, tested

05.05.2020
- implemented functionality from Michele for better IVBEAMS generation, tested
- made fortran-compile.log appending instead of overwriting, and log commands
- VIBROCC file occupations block now accepts "vac" for vacancies; added debug 
    message if occupation is less than 1, warning + rescaling if greater than 1

06.05.2020
- implemented CONSTRAINTS block reading to readDISPLACEMENTS; re-organized some 
    of the function to streamline common functionalities
- implemented new version of IVBEAMS generation, tested

12.05.2020
- worked on CONSTRAINTS reading: implemented storing in Atom class, transfer 
    to SearchPar class
- added waiting clause for when search is stopped by KeyboardInterrupt, but 
    SD.TL file is not there yet
    
13.05.2020
- debugged CONSTRAINTS reading & storing
- added option to define constraints by index as ind(N)
- implemented writing constraints to restrict.f
- included constraints in Search-progress.pdf and searchpars.info

14.05.2020
- fixed issue in search parameter creation: create search parameter even if 
    there is only a single step in displacement range, if that step is not 0
- fixed position creep issue when topmost atom moved during search
- debugged "number of parameters" in search.steu: has to count single-step 
    parameters if the step is non-zero
- DISPLACEMENTS now accepts single values on the right for vibration and 
    occupation, which will be interpreted as static offsets
- further tests and debugging of restrict.f
- fixed issue with control.chem sometimes containing no data

15.05.2020
- phaseshifts generation algorithm now checks how large the requested supercell
    would be, reduces size (by changing concentrations) if above threshold
- implemented PLOT_COLORS_RFACTOR parameter
- implemented support for mpifort compiler, but execution does not work yet

18.05.2020
- fixed problem with mpifort compiler, works now
- overhauled the way element naming conflicts are handled: no more internal 
    element renaming, instead assume user is referring to POSCAR element 
    wherever this makes sense.
- added debugging message to Rparams.setHaltingLevel function

19.05.2020
- made readAUXEXPBEAMS more versatile, added 'interactive' flag for asking 
    the user to interpret unreadable input
   
20.05.2020
- implemented option to have multiple search blocks in DISPLACEMENTS file, 
    which will be executed consecutively.

25.05.2020
- implemented shorthand for in-plane direction optimization in DISPLACEMENTS
- added check before search whether there are any parameters being varied, 
    skip search if not.

26.05.2020
- implemented search looping with SEARCH_LOOP parameter
- added 'crandom' start configuration for search: one centered, rest random
- added information about linking via 'atom number' in searchpars.info

27.05.2020
- added option to clear offsets from previous search in DISPLACEMENTS

28.05.2020
- replaced SEARCH_LOOP parameter by more flexible <loop> tags in DISPLACEMENTS

29.05.2020
- added convergence criterion in search: no change in best 10% of structures
- added plotting of older R-factor scatter to Search-progress.pdf

02.06.2020
- debugged multiple searches & plotting
- changed r-factor scatter colors in search-progress.pdf to quadratic scaling
- added Search-report.pdf output, collecting data from multiple searches

03.06.2020
- added genetic algorithm for SEARCH_CULL

04.06.2020
- fixed bug with transferring search results into next search
- disabled packing of Tensors and Deltas when execution is not finished
- added more info to standard ERROR and CRITICAL messages
- cleaned up which messages in log were debug and which were info

05.06.2020
- fixed an issue with bulk symmetry detection: sublayers of different elements 
    at same z (within tolerance) are now sorted alphabetically by element
- increased tolerances for reduceUnitCell and checkLattice functions

08.06.-09.06.2020
- testing & debugging

10.06.2020
- fixed issue with search in consecutive jobs: New job now reads original 
    position and vibrational amplitudes from POSCAR/PARAMETERS/VIBROCC in the 
    Tensors_*.zip file, bases delta on those.
- overhauled use of logging -> specific loggers for better control

12.06.2020
- fixed bug concerning loop positions in DISPLACEMENTS

15.06.2020
- fixed bug with multiple refcalcs in one run overwriting first Tensors
- fixed but that Deltas were calculated even for atoms that had no changes

16.06.2020
- fixed issue with repeat reference calculations: layer coordinates were not
    updated
- fixed issue with tolerance in checkDeltas that caused delta files to be 
    re-calculated unnecessarily
- disabled the "many open figures" warning from matplotlib (caused by search 
    report)
    
17.06.2020
- added info output when THEO_ENERGIES is initialized via exp. beams 
- changed default for THEO_ENERGIES step to 3 eV
- made R_OUT update also delete versions in OUT folder

18.06.2020
- fixed bug with jobs running from old Tensor files: POSCAR and VIBROCC in 
    the Tensors file now reflects the state when the Tensors were calculated, 
    instead of the initial state of the job

24.06.2020
- minor layout changes in plotting Search-progress.pdf and Search-report.pdf
- got version of get_equivalent_beams from Michele that should support bulk 
    symmetry, implemented passing correct string, but has some bug

25.06.2020
- bug in get_equivalent_beams is fixed, seems to work now.

26.06.2020
- changed separators in CSV output files to ";" (from ",")
- added check for equivalent beams to readOUTBEAMS

29.06.2020
- fixed bug with checkEXPBEAMS in init crashing when IVBEAMS was not there
    (was executing before symmetry search, now after)
- readPHASESHIFTS now rounds energy values after converting to eV when 
    checking whether they fit with requested energy range
- after search, added layer coordinate update before reference calculation 
    to prevent offsets within layers there
   
30.06.2020
- corrected how energy range in _PHASESHIFTS file is checked: now checks 
    E + V0r(E), instead of only E

15.07.2020
- fixed bug with removing old R_OUT files
- still issues with jobs running from old Tensor files (see 18.06.), fixed 
    same issue again, hopefully correct now.
- made readOUTBEAMS tolerant to different separators

04.08.2020
- fixed issue with unnecessary (zero-displacement) delta files being created 
    due to rounding errors
- added R-factor analysis pdf, which plots the Y-function with the I(V) curves

05.08.2020
- minor changes to Rfactor analysis pdf layout