.. _example_Cu-Te:

====================================
Example System: Cu(111)-Te ad-chains
====================================

The following example covers a ViPErLEED analysis and structure optimization for a copper telluride layer on Cu(111) based on the paper by :cite:t:`kisslingerSubmonolayerCopperTelluride2021`.
The experimental data and the outline for the analysis steps described below were provided by the publications' authors.
This system deals with :math:`(5\times \sqrt{3})_{\text{rect}}` superstructure and has 10 atoms per bulk layer.
It serves as an example for how a more challenging system can be treated with ViPErLEEDs.
In fact, the analysis presented in the original publication was performed using an early development version of ViPErLEED :cite:p:`kisslingerSubmonolayerCopperTelluride2021`.

All input files needed to follow along on your own machine can be found :download:`here</_static/example_systems/Cu(111)-Te/input_files.zip>`.

.. tip:: 
   If you are new to ViPErLEED, check out :ref:`this tutorial<example_ag_100>` first, which explains the basics in more detail.

Introduction
============

The system we are analyzing is a :math:`(5\times \sqrt{3})_{\text{rect}}` superstructure of copper telluride on the hexagonal Cu(111) substrate.
The Tellurium coverage is 0.40 mono-layers, which equates to 4 Tellurium atoms per surface unit cell.

For our example analysis we start from a qualitatively correct structure model (:ref:`POSCAR file<poscar>`) with correct layer stacking :cite:p:`kisslingerSubmonolayerCopperTelluride2021`.
However, the initial atom positions in the POSCAR are taken from bulk Cu, so we need to expect significant relaxation during the structure-optimization.
We will need to run multiple delta
The individual :ref:`DISPLACEMENTS files<displacements>` are not all shown in full below, but you can download all input files :download:`here</_static/example_systems/Cu(111)-Te/input_files.zip>`.

**TODO Lutz:** It would be nice if we could put one to three LEED patterns and figures of the structure (like for Ir(100)-O) here. I can't take them directly from the paper for legal reasons – but since you are the author, you could send me the original ones ;)

On the experimental side, we have a set of 79 beams in our energy range (20 to 500eV) – stored in the file :ref:`EXPBEAMS.csv<expbeams>`.
These beams correspond to a total energy range of around 17500 eV, of which only around 1800 eV are from integer beams.

PARAMETERS
==========

Similar to the previous examples, we start by setting up a :ref:`PARAMETERS file<parameters>`:

.. literalinclude :: /_static/example_systems/Cu(111)-Te/PARAMETERS
   :language: console
   :caption: PARAMETERS

Most of the used parameters have been explained in :ref:`previous examples<example_ag_100>`, so will skip some details here.
Worth mentioning in this particular case is that we use :ref:`SITE_DEF<sitedef>` to define the two topmost Copper and Tellurium atoms as explicit surface sites.
We are further using the :ref:`SUPERLATTICE parameter<superlattice>` to manually define the surface superlattice type and orientation (to match the convention used in :ref:`EXPBEAMS.csv<expbeams>`).

As usual, :ref:`IVBEAMS<ivbeams>` and :ref:`PHASESHIFTS<phaseshifts>` are generated automatically during initialization (:ref:`RUN = 0<run>`).
The :ref:`VIBROCC file<viboccin>` will also be generated by ViPErLEED based on the provided parameters :ref:`T_DEBYE<t_debye>`, :ref:`T_EXPERIMENT<t_experiment>`, and :ref:`VIBR_AMP_SCALE<VIBR_AMP_SCALE>`.

Rough DISPLACEMENTS
===================

For the delta-amplitudes calculation and the structure optimization (:ref:`RUN = 1-3<run>`), we will start out with a very rough grid of geometric optimizations (:ref:`DISPLACEMENTS file<displacements>`).
As is generally recommended, we start with optimizations normal to the surface (:math:`z`). 
Immediately following that comes an in-plane optimization.
Due to the complex structure, one in-plane direction is not sufficient, and we need to run an optimization in (:math:`x`) *and* (:math:`y`) direction.


.. literalinclude :: /_static/example_systems/Cu(111)-Te/DISPLACEMENTS_rough_1
   :language: console
   :caption: DISPLACEMENTS (300 pm range)

.. note::
    Note that we allow displacements of up to 300 pm for Tellurium to speed up the convergence in this example.
    Normally, this is not recommended.
    It **will** lead to significant errors, because 300 pm is well outside the range where the :ref:`tensor LEED approximation<tensor_leed>` is applicable.

As usual, we can see a visualization of the optimization convergence in the file :ref:`Search-progress.pdf<searchprogresspdf>` in the ``OUT`` directory.

.. figure:: /_static/example_systems/Cu(111)-Te/figures/Search-report_rough.pdf
   :width: 60%
   :align: center

The initial reference-calculation yields an :ref:`R-factor<r-factor_calculation>` :math:`\approx 0.82` since our starting configuration is very far from the ideal positions.
Over this rough optimization, the R-factor quickly drops to :math:`\approx 0.47`.
This is still not great, but the progress is encouraging.

Remember to keep best fit-structure by calling the :ref:`bookkeeper utility<bookkeeper>` with the ``--cont`` flag before proceeding:

    .. code-block:: console

        $ python3 bookkeeper.py --cont #[or ./bookkeeper --cont]

Once we run the next reference-calculation, we notice that we gen a R-factor of :math:`\approx 0.33`, even though we got :math:`R_{\text{P}} \approx 0.47` at the end of the previous run – **a big difference**!
This comes from the mentioned **tensor LEED error**.

Fine DISPLACEMENTS and Search Parameters
========================================

We should follow up by running a second, less coarse, optimization.
For this stage, a choice of 10 pm range with 1 pm steps should be reasonable:

.. literalinclude :: /_static/example_systems/Cu(111)-Te/DISPLACEMENTS_rough_2
   :language: console
   :caption: DISPLACEMENTS (10 pm range)

.. hint:: 
    In preparing this example we found that the default search parameters lead to rather slow convergence in this and the following steps.
    To speed up the process, we recommend using these settings for :ref:`SEARCH_START<searchstart>` and  :ref:`SEARCH_CONVERGENCE<search_convergence>` (simply append the lines to PARAMETERS):

        .. code-block:: console

            SEARCH_START = centered
            SEARCH_CONVERGENCE gaussian = 0.05 0.5
            SEARCH_CONVERGENCE dgen dec = 50 1.5

The optimization on the 1 pm grid allows us to further drops the R-factor to about :math:`\approx 0.23`, which is again a good improvement on the previous value of :math:`\approx 0.33`.

Full-dynamic Optimization
=========================

If we now visually compare experimental with calculated :math:`I(V)` curves, we already notice a good qualitative agreement.
However, we find that the peak-widths in the experimental dataset seem to be consistently narrower than in our calculation.
This is generally a sign that the imaginary part of the solid inner potential (:math:`V_{0\text{i}}`) of our calculation is off.
To be more precise, :math:`V_{0\text{i}}` is likely too large, as higher :math:`V_{0\text{i}}` increases peak-widths and smoothens out the curves.

:math:`V_{0\text{i}}` strongly affects the R-factor, but is hard to gauge for an unknown system.
Since we didn't specify a value for :math:`V_{0\text{i}}` in PARAMETERS, ViPErLEED took the default value of 4.5 eV (see :ref:`V0_IMAG<v0_imag>`).
The parameter :math:`V_{0\text{i}}` is not accessible in the tensor LEED approximation, but we can use a :ref:`full-dynamic optimization<fdoptimization>` to find an optimal value.
To do this, we set :ref:`RUN = 6<run>` and add this line to :ref:`PARAMETERS<parameters>`:

.. code-block:: console

    OPTIMIZE V0i = step 0.5

.. warning::
    Always make sure that the optimized value used for :math:`V_{0\text{i}}` is (i) reasonable (:math:`V_{0\text{i}} \lesssim 6 \text{eV}`), (ii) forms an actual minimum rather then a minimum at the limit of your range, and (iii) gives qualitatively correct :math:`I(V)` curves.

    Since higher :math:`V_{0\text{i}}` smoothens out the :math:`I(V)` curves, it is possible to deceptively decreased the R-factor by arbitrarily increasing :math:`V_{0\text{i}}`.

.. figure:: /_static/example_systems/Cu(111)-Te/figures/FD_Optimization.pdf
   :width: 60%
   :align: center

   File ``FD_Optimization.pdf`` showing parabolic fit and minimum value for :math:`V_{0\text{i}}`.

The optimized value for :math:`V_{0\text{i}}` will be output in the log file and automatically added to the :ref:`PARAMETERS file<parameters>` for subsequent runs.
Furthermore, ViPErLEED produces the files :ref:`FD_Optimization_beams.pdf<fdoptimizationbeams>` and :ref:`FD_Optimization.pdf<fdoptimizationdata>` in the ``OUT`` directory.
:ref:`FD_Optimization_beams.pdf<fdoptimizationbeams>` shows the calculated diffraction intensities for different values of the optimized parameter, while :ref:`FD_Optimization.pdf<fdoptimizationdata>` shows the R-factors corresponding to each trial value.

.. figure:: /_static/example_systems/Cu(111)-Te/figures/FD_beams.pdf
   :width: 90%
   :align: center

   Part of ``FD_Optimization_beams.pdf`` showing the effects of :math:`V_{0\text{i}}` on the :math:`(0|1)` beam.

Refined structure fit
=====================

As usual, we can now perform some final structure fits with a fine-grained (sub pm steps) grid.
In particular, we should also optimize the **vibrational amplitudes**, which we have skipped so far.
We recommend starting with the vibrational amplitudes here, since we have not "touched" them at all yet:

.. literalinclude :: /_static/example_systems/Cu(111)-Te/DISPLACEMENTS_fine_1
   :language: console
   :caption: DISPLACEMENTS (0.5 pm range)

You may want to finish up with a last "fine-tuning" of the vibrational amplitudes and (:math:`z`) positions.
See e.g. file ``DISPLACEMENTS_fine_2`` in the input files, but feel free to play around with the setting yourself, to get a feeling for the available options.
Altogether, this should bring us to an R-factor :math:`\approx 0.19`, which is already good agreement for such a complex structure.

Error calculation
=================

We can also perform an error calculation for this system to gauge how sensitive our result is to minor changes of structural parameters.
For this, we need to set up a :ref:`DISPLACEMENTS file<displacements>` specifying the requested steps.
Here is an example for displacements in (:math:`x`) direction, but example for (:math:`y`), (:math:`z`) and vibrational amplitudes are provided in the :download:`input files</_static/example_systems/Cu(111)-Te/input_files.zip>` as well:

.. literalinclude :: /_static/example_systems/Cu(111)-Te/DISPLACEMENTS_errors_x
   :language: console
   :caption: DISPLACEMENTS for error calculation in x direction

The results are plotted in the file :ref:`Errors.pdf<errorspdf>`.
We see that displacements for atoms in all layers have a drastic impact on the R-factor – so we can be fairly confident in our structure.

.. figure:: /_static/example_systems/Cu(111)-Te/figures/Errors_x_vib.pdf
   :width: 100%
   :align: center

   Page 1 of file ``Errors.pdf`` for (left) displacements in (:math:`x`) direction and (right) changes of vibrational amplitudes.