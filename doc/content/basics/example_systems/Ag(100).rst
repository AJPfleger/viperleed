.. _example_ag_100:

=======================
Example System: Ag(100)
=======================

In this section, we go through setting up and executing a simple ViPErLEED calculation for the Ag(100)-(1x1) surface.\ [#]_

This tutorial is designed such that you can follow along on your own system.
You can find the input files for each stage here.

We will start off by setting up our input files and running an :ref:`initialization<initialization>` to check for any errors in them.
Then, we run a :ref:`reference-calculation<ref-calc>` to get some initial theoretical results.
Afterwards, we performe a :ref:`delta-amplitudes<sec_deltas>` calculation and :ref:`structure-search<sec_search>` to refine the results.

.. tip:: 
   If this is your first time running ViPErLEED, first make sure to follow the :ref:`installation instructions<installation>`.
   For details on how to execute ViPErLEED on your system, see the :ref:`How To Run section<how_to_run>`.

Initialization Run
==================


Our starting point for this example is:
-  We have experimental LEED-:math:`I(V)` curves saved in the 
In this example, we want to set up a ViPErLEED calculation 
We also assume, we already have a suitable :ref:`PHASESHIFTS file<phaseshifts>`.

**TODO: Explain PHASESHIFTS generation?**

Let's have a look at the :ref:`PARAMETERS file<parameters>`:

.. literalinclude :: /_static/example_systems/Ag(100)/PARAMETERS
   :language: console
   :caption: PARAMETERS

Since we only want to to run the :ref:`initialization` for now, we set :ref:`RUN = 0<run>`.
For this example, we also limit our energy range to 50-350 eV, with a step of 3 eV (:ref:`THEO_ENERGIES<theo_energies>`).

We give some infomation on how ViPErLEED should interpret the structure given in the :ref:`POSCAR file<poscar>`.
Using :ref:`N_BULK_LAYERS<blay>` and :ref:`BULK_REPEAT<bulk_repeat>`, we specify the bulk material below the surface.
See the pages of those parameters for more details.

With the :ref:`SITE_DEF<sitedef>` command, we further define that the top-most atom (#1 in the POSCAR) should be treated as a distinct different species.
See the page on the :ref:`SITE_DEF<sitedef>` parameter for details on how this works, and see also the notes on :ref:`avoiding element name collisions<elementnamecollision>`.

In addition to the atomic positions, the calculation of scattering-intensities also requires vibrational amplitudes for every atom in the unit cell.
While the atomic positions are contained in the :ref:`POSCAR file<poscar>`, the vibrational amplitudes are given in the :ref:`VIBROCC file<viboccin>`.
However, rather than writing the :ref:`VIBROCC file<viboccin>` ourselvs, we can also let ViPErLEED make an educated guess about the vibrational amplitudes by providing the parameters :ref:`T_DEBYE<t_debye>`, :ref:`T_EXPERIMENT<t_experiment>`, and :ref:`VIBR_AMP_SCALE<VIBR_AMP_SCALE>`.

Finally, in the :ref:`PARAMETERS file<parameters>` above we already specified the parameters :ref:`V0_IMAG<v0_imag>` and :ref:`LMAX` for the reference calculation.
These set the imaginary part of the inner potential and the maxium angular momentum quantum number to be used in the calculations.

Once the run finishes, we can have a look at the :ref:`log file<log_files_tleedm>` to see if everything went as expected.
Unless there was some configuration error, the log should now contain some lines like this:

.. code-block:: console

   ...
   Found unit cell type: square
   Starting symmetry search...
   Found plane group: p4m
   Checking bulk unit cell...
   Found SUPERLATTICE = (1x1)
   ...

As expected, ViPErLEED recognized our surface be of p4m symmetry with a simple (1x1) reconstruction!

Reference Calculation and R-factor
==================================

Since we already added the parameters relating to the :ref:`reference-calculation<ref-calc>` in the previous step, we can just start the calculation again, after setting :ref:`RUN = 1<run>` to select the :ref:`reference-calculation<ref-calc>`.

Note, that the initialization will still be automatically excuted at the start of every ViPErLEED run.
Similarly, if an :ref:`EXPBEAMS.csv files<expbeams>` is provided as is the case here, the :ref:`R-factor calculation<rfactor>` will be inserted automatically after the reference-calculation.

Once the reference-calculation finishes (only takes about 30 seconds with the chosen settings) we find a result for the R-factor at the very end of the :ref:`log file<log_files_tleedm>`:

.. code-block:: console

   ...
   Total elapsed time: 30.21 seconds

   Executed segments: 0 1 11
   Final R (refcalc): 0.1722

Addionally, in the :ref:`OUT directory<dir_organization_output>`, we find a file :ref:`THEOBEAMS.csv<theobeams>` which contains the calculated theoretical :math:`I(V)` curves and a file :ref:`Rfactor_analysis_refcalc.pdf<rfactorplots>` in which the experimental and theoretical beams are plotted.
The latter should look something like this:

.. figure:: /_static/example_systems/Ag(100)/refalc_result_plot.png
   :width: 450px
   :align: center

   Rfactor_analysis_refcalc.pdf


The :math:`I(V)` curves clearly show a good qualitative agreement, but the R-factor of ~0.17 is not great for such a simple system!
We therfore proceed to the :ref:`delta-amplitudes<sec-deltas>` calculation and the :ref:`structure-search<sec-search>`.

.. note:: 
   The :ref:`reference-calculation<ref-calc>` also produces the :ref:`tensor files<tensorszip>` which are saved in the ``Tensors`` directory.
   They are required as starting point for the delta-amplitude calculation and structure-search and will be recognized automatically by ViPErLEED.

Delta-Amplitudes and Structure search
=====================================

To improve our R-factor, we can run a local structure-optimization using the :ref:`tensor LEED approach<tensorleed>`.
To do this in ViPErLEED, we run a :ref:`delta-amplitudes<sec-deltas>` calculation followed by a :ref:`structure-search<sec-search>`.

First, however, we need to provide instructions about which parameters to vary in the optimization.
In ViPErLEED, we give this infomation in the :ref:`DISPLACEMENTS file<displacements>`:

.. literalinclude :: /_static/example_systems/Ag(100)/DISPLACEMENTS
   :language: console
   :caption: DISPLACEMENTS

Since we only have very few atoms, we can be generous in our settings.
See the page on the :ref:`DISPLACEMENTS file<displacements>` for details on the syntax.
Here, we allow the :math:`z` positions of all silver atoms in the first 4 layers to vary by up to :math:`\pm 50` pm with a step-width of 2 pm.
Addionally, we also sample differnt vibrational amplitudes of the top-most atom.
This may not seem like much, but this already gives :math:`51^5` grid points (51 per varied parameter).

After setting up the :ref:`DISPLACEMENTS file<displacements>`, we can now run the delta-amplitudes calculation and structure-optimization back-to-back by setting :ref:`RUN = 2-3<run>` in :ref:`PARAMETERS<parameters>`.
For a large system, this step can take many hours to finish, but for our simple system it only takes about 10 minutes to converge (using 10 CPU cores).
At the end, we take another look at our :ref:`log file<log_files_tleedm>`:

....

We see the R-factor drop from ... to .., but we can also look at a visualization of the R-factor Convergence in the 


Conculding remarks and next steps
=================================

Full-dynamic optimization V0i, unit cell, incidence angle...


.. [#] The data was provided curtesy of **TODO** .For furhter details see  **TODO**