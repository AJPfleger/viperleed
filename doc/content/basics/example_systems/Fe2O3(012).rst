.. _example_Fe2O3:

Hematite (012)-(1×1)
====================

Hematite (:math:`\alpha \text{-Fe}_2\text{O}_3`) is the one of them most common
naturally occurring iron oxides. Its surfaces are popular model
systems for (single-atom) catalysis
:cite:p:`kraushoferAtomicscaleStructureHematite2018,franceschiModelSystemPhotocatalysis2020`,
photocatalysis and the study of mineral-water interfaces.

The :math:`(1\bar{1}02)` surface (also referred to as :math:`(012)`, or r-cut)
exhibits two stable terminations under :term:`UHV` conditions: a stoichiometric
(1×1) bulk-truncated termination, and a reduced (2×1) reconstruction
:cite:p:`kraushoferAtomicscaleStructureHematite2018`.
Here we use the bulk-truncated (1×1) surface as an example system of a "medium
complexity" oxide surface and will compare experimental LEED :math:`I(V)` data
[#]_ with a theory calculation in ViPErLEED.

All input files needed to follow along on your own machine can be found
:download:`here</_static/example_systems/Fe2O3-(1x1)/input_files.zip>`.

.. tip:: 
   If you are new to ViPErLEED, check out :ref:`this tutorial<example_ag_100>`
   first, which explains how to set up a calculation in more detail.

Introduction
============

To set up the calculation, we need to start from a structure model of the (1×1)
surface in the POSCAR format. We can easily build this ourselves from a
(:math:`\alpha \text{-Fe}_2\text{O}_3`) bulk structure.
For this example, we use the structure by
:cite:t:`maslenSynchrotronXrayStudy1994`, which can be found on the
`Crystallography Open Database (entry 2101167) <http://www.crystallography.net/cod/2101167.html>`_.

.. warning:: 
    Bulk structures can be found in various online databases, but you should be
    careful to choose a model with the correct **experimental** lattice
    parameters (as determined by :term:`XRD`).
    Lattice parameters from e.g. :term:`DFT` calculations may be off by ~1%,
    which will strongly affect the R-factor.
    Lattice parameters are not accessible in the
    :ref:`tensor LEED approximation<tensor_leed>`, but they can be optimized in
    a :ref:`full-dynamic optimization<fdoptimization>`.

To go from the rhombohedral bulk unit cell to the unit cell for the
:math:`(1\bar{1}02)` (r-cut) surface, we need to apply a suitable change of
basis:

.. math::
    (a', b', c') = (a,b,c) P

    P  = \frac{1}{3} \begin{pmatrix}
                        3 & 1  & 2 \\
                        0 & 2  & 4 \\
                        0 & -1 & 1
                     \end{pmatrix}

In VESTA, you can do this by selecting "Edit" -> "Edit Data" -> "Unit cell" ->
"Transform".

To create a suitable surface slab (as expected by ViPErLEED), we can then
replicate the unit cell along :math:`\vec{c}` and (optionally) remove the
topmost layer to create a vacuum interface.
In VESTA you can do this similarly, by applying a transformation which stretches
the cell in the :math:`\vec{c}` direction.
When doing this, VESTA may prompt you and ask what to do with the atoms in the
new unit cell.
Make sure to choose "Search atoms in the new unit-cell and add them as new
sites".

The our starting POSCAR file contains 40 atoms in total, which corresponds to
4 repeat units (layers) of 4 Fe and 6 O atoms each.


PARAMETERS and VIBROCC
======================

As in pervious examples, we begin with a simple
:ref:`PARAMETERS file<parameters>`:

.. literalinclude :: /_static/example_systems/Fe(012)-(1x1)/PARAMETERS
   :language: console
   :caption: PARAMETERS

The settings concerning global parameters and the :ref:`VIBROCC file<viboccin>`
have been discussed in detail elsewhere (see e.g. :ref:`here<example_ag_100>`).
Note, however, the parameters concerning the structure interpretation.
To let ViPErLEED know what we consider the bulk structure, we generally need to
define the parameters :ref:`BULK_REPEAT`, :ref:`LAYER_CUTS`
and :ref:`N_BULK_LAYERS`.
Alternatively, as is done here, we could also specify the parameter
:ref:`BULK_LIKE_BELOW` with a suitable value (0.35 for the given POSCAR file).

We also use the :ref:`SITE_DEF<sitedef>` parameter to define which sites should
be treated separately by ViPErLEED.
In this case, we declare two ``surface`` sites each for iron and oxygen. This
will assign the two topmost atoms of each species to the surface, and treat them
as different sites in the calculation.
They will thus be assigned different electron-atom scattering phaseshifts (see
file :ref:`PHASESHIFTS`) and different vibrational amplitudes.


Initial vibrational amplitudes can be calculated based on the sample's Debye
temperature with the parameters :ref:`T_DEBYE`, :ref:`T_EXPERIMENT` and
:ref:`VIB_AMP_SCALE`. Instead, you can also provide the amplitudes directly in
the :ref:`VIBROCC file<viboccin>`: 

.. literalinclude :: /_static/example_systems/Fe(012)-(1x1)/VIBROCC
   :language: console
   :caption: VIBROCC


Initialization
==============

We can now run the initialization to check if all input files are interpreted
correctly. If so, the :ref:`log<log_files_tleedm>` should look similar to this:

.. literalinclude :: /_static/example_systems/Fe(012)-(1x1)/log_init.txt
   :language: console
   :caption: Initialization log

The initialization log shows that the input files are interpreted correctly and
that the ``pg[0 1]`` plane group is detected.
It also shows that the bulk structure and repeat vector have been identified.
This is reflected in the PARAMETERS file, which was updated in-place and should
now contain the following lines:

.. literalinclude :: /_static/example_systems/Fe(012)-(1x1)/PARAMETERS_bulk_detected
   :language: console
   :caption: PARAMETERS after initialization

At this stage, before proceeding, you should always double-check the detected
bulk structure and spacing, as it is crucial for the calculation.
To help with this, ViPErLEED provides the files
:ref:`POSCAR_bulk and POSCAR_bulk_appended<poscar_bulk>`.
The former contains the crystal bulk structure as detected by ViPErLEED, and the
latter contains the surface slab with additional bulk layers appended to it.
You can visualize these files in VESTA to check if the bulk structure is as you
expect.
In particular, one should make sure that the bulk stoichiometry for POSCAR_bulk,
and the bulk layer spacing for POSCAR_bulk_appended, are as correct.

Reference Calculation and Structure Optimization
================================================

If the initialization ran without errors, we can proceed to the reference
calculation and structure optimization. You can find more details about what
happens in each section of a ViPErLEED LEED-I(V) calculation
:ref:`here<tleedm>`.

In short, the reference calculation performs a full-dynamic LEED calculation to
generate I(V) curves for the input structure.
I(V) curves are very sensitive to the exact atomic positions and vibrational
amplitudes.
Because of this, it is generally necessary, to optimize the structure to get the
best fit to the experimental I(V) data.
The reference calculation is the starting point for this optimization, but
full-dynamic calculations are computationally too expensive for the optimization
which may require a very large number of iterations.
We can perform the optimization in a computationally more efficient way by using
a perturbative approach, where we calculate the effect of small changes to the
input structure.
This is done in the :ref:`Delta-Amplitude` calculation and structure
optimization.

To run these sections, we also need to specify which parameters we want to vary
(i.e. the parameter space).
We do this by providing a :ref:`DISPLACEMENTS file<displacements>`:

.. literalinclude :: /_static/example_systems/Fe(012)-(1x1)/DISPLACEMENTS_L1-2_looped
   :language: console
   :caption: DISPLACEMENTS

Here, we specify that we want to optimize the atomic out-of-plane positions of
all atoms in the first and second layer from -0.05 to 0.05 Å in steps of 0.01 Å.
We optimize the vibrational amplitudes of the surface atoms in the same way.
We subsequently optimize in-plane position of the first two layers.
Note also the ``<loop>`` and ``</loop>`` tags at the beginning and end of the
file, which indicate that these steps should be repeated until convergence.
For more details on the syntax, see the page on the
:ref:`DISPLACEMENTS file<displacements>`.


We can now start the calculation by setting the :ref:`RUN` parameter to
``1-3 1`` and starting the program.
This will execute the reference calculation, the Delta-Amplitude calculation and
the looped structure optimization in order.
By appending the ``1`` to the ``1-3``, we also tell ViPErLEED to finish with a
second reference calculation of the optimized structure.

Note that the entire calculation may take a long time to complete:
On a modern 48-core machine, this step of the calculation took about 10 hours to
finish.

Once finished, you can check the log files to see if the calculation ran without
errors.
You can also find the final R-factor at the end of the log file:

.. literalinclude :: /_static/example_systems/Fe(012)-(1x1)/log_search_1.txt
   :language: console
   :caption: Final log

You may notice that both the initial R-factor (:math:`R_P \approx 0.78`) is very
high.
This is not unusual when starting from a totally un-relaxed bulk-truncated
structure, as these may require multiple iterations of reference calculations,
and structure optimizations to converge.

.. note::

   You may also notice that the R-factor for the second reference calculation is quite
   different from the R-factor obtained at the end of the structure optimization.
   This is to be expected, as the perturbative tensor LEED approximation used in
   the structure optimization is only valid for small changes to the structure.
   The final reference calculation removes this error and gives a more accurate
   R-factor.


Optimizing the Incidence Angle
==============================

In our case, the R-factor has improved significantly after the first structure
optimization, but far from a good fit at :math:`R_P \approx 0.40`.
This is because our measurement was performed on a UHV manipulator that does not
have enough degrees of freedom in rotation, to perfectly align the sample with
the LEED optics.
We thus know, we need to optimize the incidence angle of the electron beam to
get a closer correspondence between the experimental and calculated I(V) curves.

However, the incidence angle is not a parameter that is accessible in the tensor
LEED approximation.
In ViPErLEED, we can instead optimize the incidence angle using a full-dynamic
optimization, which optimizes a parameter by performing a full-dynamic reference
calculation at each iteration.

To do this, we need to edit PARAMETERS to set the :ref:`RUN` as ``6`` provide
the ``OPTIMIZE`` parameter to specify which parameter we want to optimize:

.. literalinclude :: /_static/example_systems/Fe(012)-(1x1)/PARAMETERS_optimize_theta
   :language: console
   :caption: PARAMETERS with OPTIMIZE specified for the incidence angle theta

Here, we set the initial step size to 1° and converge criterion to 0.1°.
After running the calculation, we find that we find a minimum at about 
:math:`\theta \approx 0.87°` which already reduces the R-factor to about
:math:`R_P \approx 0.22`.
We can also see that the I(V) curves and consequently the R-factor are very
sensitive to the incidence angle in the
:ref:`FD_Optimization.pdf<fdoptimizationbeams>` and
:ref:`FD_Optimization_beams.pdf<fdoptimizationbeams>` files:

*TODO figure FD optimization*

Full-dynamic Optimization
=========================


.. [#] The data was obtained by Alexander M. Imre and Michele Riva, with further
support provided by Florian Kraushofer, Giada Franceschi, Tilman Kißlinger and
Lutz Hammer.
